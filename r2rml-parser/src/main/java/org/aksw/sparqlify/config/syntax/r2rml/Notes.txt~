mapping:TriplesMap3
      rr:logicalTable
              [ rr:tableName "producer"
              ] ;
      rr:predicateObjectMap
              [ rr:objectMap
                        [ rr:column "publisher"
                        ] ;
                rr:predicate <file:///home/sherif/Database/r2rml/wals.org//vocabulary/producer#publisher>
              ] ;
      rr:predicateObjectMap
              [ rr:objectMap
                        [ rr:column "nr" ;
                          rr:dataype xsd:int
                        ] ;
                rr:predicate <file:///home/sherif/Database#id>
              ] ;
      rr:subjectMap
              [ rr:class vocab:producer ;
                rr:template "w0als.org/data#producer/nr={nr}"
              ] .
              
              
Create View whatever As
  Construct {
    ?s a vocab:producer . // Follows from subjectMap
    ?s <file:///home/sherif/Database/r2rml/wals.org//vocabulary/producer#publisher> ?t . // ?s because of the subject map;
    ?s <file:///home/sherif/Database#id> ?u . 
  }
  With {
    ?s = uri(concat("wals.org/data#producer/nr", ?nr)) // Follows from template "wals.org/data#producer/nr={nr}" in the subject map
    ?t = plainLiteral(?publisher) // follows from rr:column "publisher"
    ?u = typedLiteral(?nr, xsd;int) 
     
 
 
 class PredicateObject {
 	Expr predicateExpr; // NodeValue.make{String, Integer}(...)
 	Expr objectExpr;
 }
 
 PredicateObject process(PredicateObjectMap pom) {
 
 
 
 }
 
 
Map<Var, Expr> varToExpr = new HashMap<Var, Expr>();

Set<Quad> process(TriplesMap tm, varToExpr) {
 
    // Create the variable and expression for the subjectMap
 
    for each tm.getPredicateObjectMap() {
       // Calls process(pom, varToExpr)
       
       // Assign variables to expressions
    }
 }
